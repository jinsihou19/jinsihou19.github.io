<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[基于Token的身份验证]]></title>
      <url>/2017/12/24/web/%E5%9F%BA%E4%BA%8EToken%E7%9A%84%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</url>
      <content type="html"><![CDATA[<p>简单介绍 Cookie-Session，XSS，CSRF 相关基础，和基于 Token 的身份验证过程。<br><a id="more"></a></p>
<p>HTTP 协议是一种无状态的协议。这意味着本次请求使用用户名密码通过验证之后，下次请求服务器还是不知道是谁发送的请求，还需要再次验证。</p>
<h4 id="Cookie-Session-身份验证"><a href="#Cookie-Session-身份验证" class="headerlink" title="Cookie-Session 身份验证"></a>Cookie-Session 身份验证</h4><p>最常用的解决方法就是，当用户请求登录的时候，如果没有问题，我们在服务端生成一条记录，这个记录里可以说明一下登录的用户是谁，然后把这条记录的 ID 号发送给客户端，客户端收到以后把这个 ID 号存储在 Cookie 里，下次这个用户再向服务端发送请求的时候，可以带着这个 Cookie ，这样服务端会验证一个这个 Cookie 里的信息，看看能不能在服务端这里找到对应的记录，如果可以，说明用户已经通过了身份验证，就把用户请求的数据返回给客户端。</p>
<p>上面说的就是 Cookie-Session 身份验证的过程。这解决了 HTTP 无状态的问题，但是也带来了一些其他问题，比如：XSS（Cross Site Scripting）跨站脚本攻击和 CSRF（Cross-site request forgery）跨站请求伪造。</p>
<h5 id="XSS（Cross-Site-Scripting）跨站脚本攻击"><a href="#XSS（Cross-Site-Scripting）跨站脚本攻击" class="headerlink" title="XSS（Cross Site Scripting）跨站脚本攻击"></a>XSS（Cross Site Scripting）跨站脚本攻击</h5><p>XSS 攻击是指网页中漏洞，通过巧妙的方法被注入恶意代码，当用户加载页面的时候自动执行恶意代码的程序。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和 cookie等各种内容。</p>
<p>假如页面中出现了 XSS 漏洞，由于 Cookie 是可以被 JS 获取的，攻击者可以获取到用户的 cookie 从而能够操作用户的账户等。在设置 cookie 的时候，设置httpOnly 选项使得 JS 不能读取到 cookie，那么 XSS 注入的问题也基本不用担心了。这时候还存在有另外一种攻击手段。</p>
<h5 id="CSRF（Cross-site-request-forgery）跨站请求伪造"><a href="#CSRF（Cross-site-request-forgery）跨站请求伪造" class="headerlink" title="CSRF（Cross-site request forgery）跨站请求伪造"></a>CSRF（Cross-site request forgery）跨站请求伪造</h5><p>浏览器在访问同一个网站时会自动携带上 cookie。如果此时已经通过了验证，攻击者可以在自己的页面内访问目标网站并执行一些操作。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。可以说 CSRF 是利用网站对用户网页浏览器的信任进行攻击的。</p>
<p>CSRF 有两种防御措施：一个是检查Referer字段，另一个是添加校验token。Referer字段简单有效，但是也有些缺陷，一是无法保证所有浏览器都有具体实现，甚至有些用户由于隐私问题手动关闭Referer字段，另外也无法保证Referer字段是否有其他漏洞。添加校验token是比较有效的防御 CSRF 攻击的措施。由于浏览器在访问同一个网站时会自动携带上 cookie，所以只要身份验证信息不保存在 cookie 中，并且攻击者无法伪造验证信息，那么攻击者就无法再执行 CSRF 攻击。</p>
<h4 id="Token-身份验证"><a href="#Token-身份验证" class="headerlink" title="Token 身份验证"></a>Token 身份验证</h4><p>先看认证的<br>流程图：</p>
<p><img src="token1.png" alt="基于token的身份验证流程"></p>
<p>token 身份验证的过程：</p>
<ol>
<li>用户发送用户名密码进行登录；</li>
<li>登录之后生成一个 token，随响应返回。这里有两种方式返回 token，一种是放入 cookie 中，前端从 cookie 中取出加到请求头中，但是一旦设置httponly，前端就无法获取到后台设置的 cookie 了，这种方法不适合。所以 token 就改为随响应返回。</li>
<li>前端将其存在 localstorage 或者中 cookie。一是保存在 localstorage 有弊端，有些上古浏览器，比如ie 567，并不支持 localstorage，需要一个 polyfill 来兼容所有浏览器。二是保存在cookie中，这里只是将cookie作为一种储存来使用，不会受到后端设置 httponly 的影响，另外这里token保存在cookie中，由于需要手动放入请求头，不会影响验证。</li>
<li>发送请求时，由 JS 操作取出保存的 token，并在请求头上加上 Authorization：token，发送请求；</li>
<li>后台拦截请求（主要是post，put，detele等请求）进行 token 校验，通过执行逻辑返回数据，不通过重定向到登录界面或者返回认证失败；</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 网络安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> token </tag>
            
            <tag> 身份验证 </tag>
            
            <tag> XSS </tag>
            
            <tag> CSRF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML条件注释]]></title>
      <url>/2017/12/23/webfront/HTML%E6%9D%A1%E4%BB%B6%E6%B3%A8%E9%87%8A/</url>
      <content type="html"><![CDATA[<p>简单介绍下 HTML 条件注释<br><a id="more"></a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if !IE]&gt;&lt;!--&gt;</span> 除IE外都可识别 <span class="comment">&lt;!--&lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE]&gt; 所有的IE可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 6]&gt; 仅IE6可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 6]&gt; IE6以及IE6以下版本可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if gte IE 6]&gt; IE6以及IE6以上版本可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 7]&gt; 仅IE7可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 7]&gt; IE7以及IE7以下版本可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if gte IE 7]&gt; IE7以及IE7以上版本可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 8]&gt; 仅IE8可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 9]&gt; 仅IE9可识别 &lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用 HTML 条件注释可以使得某些标签或者脚本只在指定的版本下加载。</p>
<p>其中：</p>
<ul>
<li>lte：就是Less than or equal to的简写，也就是小于或等于的意思。</li>
<li>lt ：就是Less than的简写，也就是小于的意思。</li>
<li>gte：就是Greater than or equal to的简写，也就是大于或等于的意思。</li>
<li>gt ：就是Greater than的简写，也就是大于的意思。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 条件注释 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何兼容到IE8]]></title>
      <url>/2017/12/21/webfront/%E5%A6%82%E4%BD%95%E5%81%9AIE%E4%BD%8E%E7%89%88%E6%9C%AC%E5%85%BC%E5%AE%B9/</url>
      <content type="html"><![CDATA[<p>在开发前端项目中，最痛苦的就是进行IE低版本浏览器的兼容和适配。现在的项目没有特殊要求一般兼容到 IE8 就可以了。那我们在进行开发的时候，应该怎么去支持 IE 浏览器呢？由于 ES6 的特性各个浏览器支持的参差不齐，我们经常会使用 Babel 转 ES5 后，运行在浏览器上。今天要讨论的是项目兼容到 IE8 的问题。<br><a id="more"></a></p>
<h4 id="选择库和框架"><a href="#选择库和框架" class="headerlink" title="选择库和框架"></a>选择库和框架</h4><p>在前端开发的时候，选择库和框架的时候，一定要注意的就是文档中的浏览器支持情况。假如框架或者库只支持到 IE11，那么基于该框架的项目也只能是支持 IE11 或以上的浏览器。项目的 IE 兼容性是取项目中所有库的支持IE版本下限最高的那个。所以要使得项目兼容到 IE8，我们在挑选框架和库的时候，所有都要选择最低支持到 IE8 或以下。</p>
<h4 id="设置文档兼容模式"><a href="#设置文档兼容模式" class="headerlink" title="设置文档兼容模式"></a>设置文档兼容模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>Edge 模式告诉 IE 以最高级模式渲染文档，也就是任何IE版本都以当前版本所支持的最高级标准模式渲染，避免版本升级造成的影响。简单的说，就是什么版本 IE 就用什么版本的标准模式渲染。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"chrome=1"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>上面这个meta标签是强制 IE 使用 Chrome Frame 渲染。</p>
<p>最佳的兼容模式方案，结合考虑以上两种：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge,chrome=1"</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="支持-ES5-方法"><a href="#支持-ES5-方法" class="headerlink" title="支持 ES5 方法"></a>支持 ES5 方法</h4><p>在<code>&lt;head&gt;</code>标签中加上下面代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">&lt;script type="text/javascript" src="js/es5-shim.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;script type="text/javascript" src="js/es5-sham.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;script type="text/javascript" src="js/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<p>HTML条件注释见 <a href="/2017/12/23/webfront/HTML条件注释/" title="HTML条件注释">HTML条件注释</a> 。</p>
<p><code>es5-shim.js</code> 完美模拟了所有 ES5 中可以被完美模拟的方法。文档见GitHub <a href="https://github.com/es-shims/es5-shim" target="_blank" rel="noopener">es5-shim</a>。</p>
<p><code>es5-sham.js</code> 尽量的模拟一些无法被完美模拟的方法，并保证代码不会崩溃，但不保证方法的功能全部正常运行。</p>
<p>这两个可以让一些只支持 ES3 的老旧浏览器运行 ES5 时不会出现大的问题。</p>
<h4 id="支持媒体查询"><a href="#支持媒体查询" class="headerlink" title="支持媒体查询"></a>支持媒体查询</h4> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>Respond.js</code>让不支持<code>css3 Media Query</code>的浏览器包括 IE6-IE8 等其他浏览器支持查询。文档见GitHub <a href="https://github.com/scottjehl/Respond" target="_blank" rel="noopener">Respond</a>。</p>
<h4 id="支持-HTML5-标签"><a href="#支持-HTML5-标签" class="headerlink" title="支持 HTML5 标签"></a>支持 HTML5 标签</h4><p> 如果开发中使用到了 HTML5 标签，还需要加入以下代码：</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<p> <code>html5shiv</code>使得传统浏览器支持部分 HTML5 元素并提供相应的基本样式。传统浏览器，即主流浏览器的低版本，包括IE6-9、Safari4.x和Firefox 3.x等。文档参见 GitHub <a href="https://github.com/aFarkas/html5shiv" target="_blank" rel="noopener">html5shiv</a>。</p>
<p> 目前想到的就这么多，欢迎评论补充。</p>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IE低版本 </tag>
            
            <tag> 兼容性 </tag>
            
            <tag> HTML条件注释 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Meta 标签中的 SEO 优化]]></title>
      <url>/2017/12/17/webfront/Meta%E6%A0%87%E7%AD%BE%E4%B8%AD%E7%9A%84SEO%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>本文主要介绍<code>Meta</code>标签中和<code>SEO</code>优化有关的标签，<code>description</code>，<code>robots</code>，<code>keywords</code>和<code>title</code>，以及优化建议。<br><a id="more"></a></p>
<h4 id="Meta-Description"><a href="#Meta-Description" class="headerlink" title="Meta Description"></a>Meta Description</h4><p><code>Meta description</code>标签可能是最有用的标签之一。顾名思义，它会给搜索引擎提供关于这个网页的简短的描述。代码如下:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"页面简介"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>有这个标签之后，搜索引擎会在搜索结果页链接的下方显示出这个网页的简短的描述。推荐的<code>description</code>长度为160 个字符。</p>
<p>但是如果你没有使用<code>description</code>标签，搜索引擎仍会在搜索结果页链接的下方显示出自己创键的一小段文字或者干脆为空。没有简介或者不精确的简介，会让搜索结果略显单薄，也就意味着你将可能失去用户点击网页的机会。</p>
<h4 id="Meta-Robots"><a href="#Meta-Robots" class="headerlink" title="Meta Robots"></a>Meta Robots</h4><p><code>Meta robots</code>标签管理着搜索引擎是否可以进入网页，你可以用它来允许或不允许搜索引擎来获取你的网页、进入你网页中的子链接或对你的网页存档。例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"noindex,nofollow"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个 <code>meta</code> 标签告诉搜索引擎不要获取网页，并且阻止其进入链接。如果你不小心使用了两个矛盾的术语 (例如noindex 和index)，谷歌会选择最具限制性的选项。</p>
<p>为什么这个标签会对搜索引擎优化(SEO)起作用呢?首先，它可以防止对拷贝内容的冗余抓取，例如页面的打印版页面。它也可能会对那些内容不完整的页面或者而存在私密信息的网页起作用。</p>
<h4 id="Meta-Keywords"><a href="#Meta-Keywords" class="headerlink" title="Meta Keywords"></a>Meta Keywords</h4><p>在meta keywords标签里面，你可以存储几个关于网页内容的关键字。代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"关键字,keyword"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>不过现在主流的搜索引擎很少使用meta keywords来判断网页的内容了。设置这个标签的可能价值不太高。</p>
<h4 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h4><p>专业的讲，<code>title</code>标签不是<code>meta</code>标签，但他们都放在相同位置，它对搜索引擎优化很重要。</p>
<p>在所有的<code>HTML</code>文档中，<code>title</code>标签都是不可缺少的。它定义了整个文档的标题，如下所示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title of the page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>标题通常会显示在两个不同的地方：浏览器的头部标签和搜索结果页。这就意味着<code>title</code>标签在点击率(CTR)和排名上有很重要的影响。</p>
<p>一个好的标题应该包含关键字，而且最好放在标题的开头部分。谷歌会限制标题为70个字符，所以需要书写一个合适的标题。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>经过上面的介绍，一般的来说，Meta标签中的SEO优化加上<code>keywords</code>标签和<code>description</code>标签就可以了。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"页面简介"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"关键字,keyword"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> meta </tag>
            
            <tag> seo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PhantomJs 踩坑]]></title>
      <url>/2017/12/15/webfront/PhantomJs%E8%B8%A9%E5%9D%91/</url>
      <content type="html"><![CDATA[<p><code>PhantomJs</code>遇到的问题<br><a id="more"></a></p>
<h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ul>
<li>phantomjs 环境下不能给 window.localStorage 赋值，会引起 phantomjs 占用内存、CPU 等资源占用飙涨。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PhantomJs </tag>
            
            <tag> 踩坑 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Meta 标签控制 IE 渲染模式]]></title>
      <url>/2017/12/12/webfront/meta%E6%A0%87%E7%AD%BE%E6%8E%A7%E5%88%B6IE%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><code>meta</code>标签控制<code>IE</code>渲染标准模式和兼容模式<br><a id="more"></a></p>
<p>“X-UA-Compatible”的值有三种方式：</p>
<ol>
<li>Edge;</li>
<li>Emulate+IE版本号;</li>
<li>单纯版本号。</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span> &gt;</span></span><br></pre></td></tr></table></figure>
<p>Edge：始终以最新的文档模式来渲染页面。忽略文档类型声明。对于IE8，始终以IE8标准模式渲染页面。IE9亦如此。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"IE=EmulateIE9"</span> &gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>EmulateIE9：如果声明了文档类型，则以IE9标准模式渲染页面，否则将文档模式设置为IE5。</li>
<li>EmulateIE8：如果声明了文档类型，则以IE8标准模式渲染页面，否则将文档模式设置为IE5。 </li>
<li>EmulateIE7：如果声明了文档类型，则以IE7标准模式渲染页面，否则将文档模式设置为IE5。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"IE=9"</span> &gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>9：强制以IE9标准模式渲染页面，忽略文档类型声明。</li>
<li>8：强制以IE8标准模式渲染页面，忽略文档类型声明。</li>
<li>7：强制以IE7标准模式渲染页面，忽略文档类型声明。</li>
<li>5：强制以IE5标准模式渲染页面，忽略文档类型声明。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> web </tag>
            
            <tag> IE </tag>
            
            <tag> 兼容 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[打包electron应用]]></title>
      <url>/2016/05/20/quickstart/electron/%E6%89%93%E5%8C%85electron%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>运行第一个程序之后，我希望自己写的程序能够给别人运行，这就涉及到应用的打包。<br><a id="more"></a><br>在项目的目录下，打开终端运行命令安装electron打包工具。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron-packager --save-dev</span><br></pre></td></tr></table></figure></p>
<h2 id="打包应用"><a href="#打包应用" class="headerlink" title="打包应用"></a>打包应用</h2><p>安装完毕之后，在<code>packsge.json</code>中添加构建脚本。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "electron .",</span><br><span class="line">    "build": "electron-packager . MyApp --platform=darwin --arch=x64 --ignore=node_modules/electron-*"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>electron-packager的格式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">electron-packager 项目目录 app名称 --platform=平台 --arch=架构 --ignore=要忽略的目录或文件</span><br><span class="line"><span class="comment"># 详细的参数和使用方法可以是使用命令 --help的形式查看帮助</span></span><br></pre></td></tr></table></figure></p>
<p>保存之后，在终端运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></p>
<p><em>注意</em>：这个运行会下载没有的平台的构建包，网速慢的话需要不少时间。</p>
<p>完成之后就会在目录下生成一个appname-platform-arch名字的文件夹，打包好的应用就在文件夹中。</p>
<p><img src="1.png" alt=""></p>
<h2 id="压缩源码"><a href="#压缩源码" class="headerlink" title="压缩源码"></a>压缩源码</h2><p>生成应用的时，有时候不希望直接暴漏源码。使用源码压缩就可以将源码打包成一个asar的包。<br>同样需要添加脚本，现在的脚本是这样的：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "electron .",</span><br><span class="line">    "package": "asar pack MyApp-darwin-x64/MyApp.app/Contents/Resources/app MyApp-darwin-x64/MyApp.app/Contents/Resources/app.asar",</span><br><span class="line">    "build": "electron-packager . MyApp --platform=darwin --arch=x64 --ignore=node_modules/electron-*"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>在终端运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install package</span><br></pre></td></tr></table></figure></p>
<p>现在打开app包就可以看见同名的asar的，然后删除原来的源码包就可以了。</p>
<p><img src="2.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> 原生应用 </tag>
            
            <tag> Electron </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新建Electron应用]]></title>
      <url>/2016/05/20/quickstart/electron/Try-Electron/</url>
      <content type="html"><![CDATA[<p>Electron 框架的前身是 Atom Shell，可以让你写使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序。<br><a id="more"></a><br>它是基于io.js 和 Chromium 开源项目，并用于在 Atom 编辑器中。Electron 是开源的，由 GitHub 维护，有一个活跃的社区。最重要的是，Electron 应用服务构建和运行在 Mac，Windows 和 Linux。</p>
<h2 id="建立npm工程"><a href="#建立npm工程" class="headerlink" title="建立npm工程"></a>建立npm工程</h2><p>新建工程文件夹，使用npm初始化一个npm项目</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>
<p>接下来npm会引导你进行一个配置向导，配置完成之后会生成一个<code>package.json</code>的配置文件。配置文件大概是这样的：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"electron-app"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"electron-app"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"jinsihou"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="安装Electron"><a href="#安装Electron" class="headerlink" title="安装Electron"></a>安装Electron</h2><p>运行以下命令安装electron。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i electron-prebuilt --save-dev    <span class="comment">#保存在依赖中以便下次使用</span></span><br></pre></td></tr></table></figure></p>
<p>安装完成之后，在工程目录下建立一个<code>index.js</code>，这个名字需要和<code>package.json</code>配置的main项保持一致。填入以下内容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>保存之后，现在我们来运行一下，编辑<code>package.json</code>,在scripts下添加一项。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "electron ."</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后运行命令，启动应用。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>
<p>这就是一个最简单的electron应用，它只有一个800*600的空窗口。</p>
<h2 id="Hello-electron"><a href="#Hello-electron" class="headerlink" title="Hello electron"></a>Hello electron</h2><p>编辑<code>index.js</code>，添加一个html作为内容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">app.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">  	width: <span class="number">800</span>,</span><br><span class="line">  	height: <span class="number">600</span></span><br><span class="line">  &#125;);</span><br><span class="line">  mainWindow.loadURL(<span class="string">'file://'</span> + __dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>新建一个<code>index.html</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  Hello electron</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行如图：<br><img src="1.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> 原生应用 </tag>
            
            <tag> Electron </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[构建Hexo静态网站]]></title>
      <url>/2016/05/19/quickstart/%E9%83%A8%E7%BD%B2%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8hexo/</url>
      <content type="html"><![CDATA[<p>这个<code>Hexo</code>部署有一段时间了，但是时间久了之后，已经忘记了如何写文章及部署到<code>github.io</code>，所以记录在这，以供回顾。<br><a id="more"></a></p>
<h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p>下载并安装<code>git</code>或者是<code>github</code>，了解点Git的基础命令就可以完成本任务。</p>
<h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>到官网下载并安装<code>Node.js</code>，最好选择稳定版。</p>
<h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><p><code>npm</code>是<code>nodejs</code>的模块管理器，<code>npm</code>在<code>nodejs</code>中自带，介绍几个常用命令，#之后为注释。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm --<span class="built_in">help</span>          <span class="comment">#npm帮助，查看其他命令的使用方法</span></span><br><span class="line">npm i module_name   <span class="comment">#安装node模块完整的命令是npm install</span></span><br><span class="line">npm i               <span class="comment">#单独使用的时候，可以根据文件夹下的package.json配置文件自动安装依赖</span></span><br><span class="line">npm init            <span class="comment">#初始化一个init工程，会启动一个向导一样的配置，成功之后会生成一个package.json</span></span><br></pre></td></tr></table></figure></p>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>安装全局Hexo：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure></p>
<p>新建一个工程文件夹，在该文件夹下运行命令，Hexo会自动在该文件夹下下载搭建网站所需的所有文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></p>
<p>安装依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p>
<p>现在就已经安装好了基本内容了，现在介绍几个Hexo常用命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment">#完整命令为hexo generate,用于生成静态文件</span></span><br><span class="line">hexo s <span class="comment">#完整命令为hexo server,用于启动服务器，主要用来本地预览</span></span><br><span class="line">hexo d <span class="comment">#完整命令为hexo deploy,用于将本地文件发布到github上</span></span><br><span class="line">hexo n <span class="comment">#完整命令为hexo new,用于新建一篇文章，包括自动建立资源文件夹</span></span><br></pre></td></tr></table></figure>
<p>本地运行一下安装好的hexo</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>然后用浏览器访问<code>http://localhost:4000/</code>此时，你应该看到了一个漂亮的博客了，当然这个博客只是在本地的，别人是看不到的,我们需要把他发布到<code>github.io</code>上。</p>
<h4 id="部署本地文件到github"><a href="#部署本地文件到github" class="headerlink" title="部署本地文件到github"></a>部署本地文件到<code>github</code></h4><p>编辑hexo工程下的<code>_config.yml</code>文件,在<code>_config.yml</code>最下方，添加如下配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/jinsihou19/jinsihou19.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: new</span><br></pre></td></tr></table></figure>
<p>保存之后运行以下命令部署到<code>github</code>上，第一次运行会要求输入密码。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h4 id="hexo的配置文件"><a href="#hexo的配置文件" class="headerlink" title="hexo的配置文件"></a><code>hexo</code>的配置文件</h4><p><code>hexo</code>里面有两个常用到的配置文件，分别是整个博客的配置文件<code>hexo/_config.yml</code>和主题的配置文件<code>hexo/themes/hueman/_config.yml</code>。接下来介绍整个博客的配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site	这下面的几项配置都很简单，你看我的博客就知道分别是什么意思</span></span><br><span class="line">title: 金丝猴的博客 <span class="comment">#博客名</span></span><br><span class="line">subtitle:</span><br><span class="line">description:</span><br><span class="line">author: 金丝猴</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone:     <span class="comment">#时区，此处不填写，hexo会以你目前电脑的时区为默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL	暂不配置，使用默认值</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://jinsihou19.github.io  <span class="comment">#域名</span></span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory		暂不配置，使用默认值</span></span><br><span class="line">source_dir: <span class="built_in">source</span></span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing	文章布局等，使用默认值</span></span><br><span class="line">new_post_name: :title.md <span class="comment"># File name of new posts</span></span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line">external_link: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line">post_asset_folder: <span class="literal">false</span></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line">future: <span class="literal">true</span></span><br><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag	暂不配置，使用默认值</span></span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format	时间格式，使用默认值</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 10	<span class="comment">#每页显示的文章数，0表示不分页</span></span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions	插件配置，暂时不配置</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: http://hexo.io/themes/</span></span><br><span class="line">plugins:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">theme: hueman	<span class="comment">#使用的主题，即：myblog\themes文件夹下的主题文件夹名</span></span><br><span class="line"></span><br><span class="line">feed:	<span class="comment">#之后配置rss会用，使用如下配置即可</span></span><br><span class="line">  <span class="built_in">type</span>: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  <span class="built_in">limit</span>: 20  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment	用于部署到github，之前已经配置过</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/jinsihou19/jinsihou19.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<h4 id="发表一篇文章"><a href="#发表一篇文章" class="headerlink" title="发表一篇文章"></a>发表一篇文章</h4><p>想要新建文章的时候，在项目文件夹下运行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"my new post"</span></span><br></pre></td></tr></table></figure>
<p>使用<code>Markdown</code>进行编辑，这是用命令创建出来的md文件模板。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: my new post <span class="comment">#可以改成中文的，如"新文章”</span></span><br><span class="line">date: 2015-04-08 22:56:29 <span class="comment">#发表日期，一般不改动</span></span><br><span class="line">categories: blog <span class="comment">#文章文类</span></span><br><span class="line">tags: [博客，文章] <span class="comment">#文章标签，多于一项时用这种格式，只有一项时使用tags: blog</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上</span></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"><span class="comment">#在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</span></span><br></pre></td></tr></table></figure>
<p>写完文章后，部署的步骤：</p>
<ol>
<li><code>hexo g</code>生成静态文件。</li>
<li><code>hexo s</code>在本地预览效果。</li>
<li><code>hexo d</code>同步到github，然后使用<code>http://jinsihou19.github.io</code>进行访问。</li>
</ol>
<h5 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h5><ul>
<li>一些网站的静态资源例如<code>favicon.ico</code>、<code>images</code>等或者<code>github</code>的<code>CNAME</code>文件（用于指定自定义域名），每次设置之后都会消失。将需要直接上传至<code>github</code>的内容放在<code>source</code>文件夹下即可。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> npm </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[事件代理和json对象的操作]]></title>
      <url>/2016/03/28/webfront/%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E5%92%8Cjson%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>任务十六 事件代理和json对象的操作<br><a id="more"></a></p>
<h3 id="json对象的操作"><a href="#json对象的操作" class="headerlink" title="json对象的操作"></a>json对象的操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aqiData = &#123;</span><br><span class="line">	<span class="string">"北京"</span>: <span class="number">90</span>,</span><br><span class="line">	<span class="string">"上海"</span>: <span class="number">40</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ol>
<li>添加</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aqiData[city] = value;</span><br></pre></td></tr></table></figure>
<ol>
<li>遍历</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> data <span class="keyword">in</span> aqiData) &#123;</span><br><span class="line">	<span class="built_in">console</span>.info(consldata:aqiData[data]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>删除</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> aqiData[data];</span><br></pre></td></tr></table></figure>
<h3 id="事件代理机制"><a href="#事件代理机制" class="headerlink" title="事件代理机制"></a>事件代理机制</h3><p><em>事件代理机制</em></p>
<blockquote>
<p>当我们需要对很多元素添加事件的时候，可以通过将事件添加到它们的父节点而将事件委托给父节点来触发处理函数。这主要得益于浏览器的事件冒泡机制。</p>
</blockquote>
<p><em>浏览器的事件冒泡机制</em></p>
<blockquote>
<p>DOM2.0模型将事件处理流程分为三个阶段：一、事件捕获阶段，二、事件目标阶段，三、事件起泡阶段。如图：</p>
<p>事件捕获：当某个元素触发某个事件（如onclick），顶层对象document就会发出一个事件流，随着DOM树的节点向目标元素节点流去，直到到达事件真正发生的目标元素。在这个过程中，事件相应的监听函数是不会被触发的。</p>
<p>事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数。如果没有绑定监听函数，那就不执行。</p>
<p>事件起泡：从目标元素开始，往顶层元素传播。途中如果有节点绑定了相应的事件处理函数，这些函数都会被一次触发。如果想阻止事件起泡，可以使用e.stopPropagation()（Firefox）或者e.cancelBubble=true（IE）来组织事件的冒泡传播。</p>
</blockquote>
<p><img src="http://images.cnitblog.com/blog/477973/201302/18141423-8bd09a9c1e184df9a13b6e26b88348f3.jpg" alt=""></p>
<p><em>实例</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"aqi-table"</span> <span class="attr">border</span>=<span class="string">"1px"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">td</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>空气质量<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">td</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">td</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当事件被抛到更上层的父节点的时候，我们通过检查事件的目标对象（target）来判断并获取事件源对象。我这里没有判断是否是这个对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由上层（泛指）来捕获这个事件，然后回溯到事件触发者来进行处理</span></span><br><span class="line">table.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.target) &#123;<span class="comment">//这里的taget就是button</span></span><br><span class="line">	    <span class="keyword">let</span> context = e.target.parentNode.parentNode.firstChild.innerText;</span><br><span class="line">	    <span class="keyword">delete</span> aqiData[context];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 事件代理 </tag>
            
            <tag> dom </tag>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 bower 搭建 bootstrap 工程]]></title>
      <url>/2016/03/28/webfront/%E4%BD%BF%E7%94%A8bower%E6%90%AD%E5%BB%BAbootstrap%E5%B7%A5%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>使用<code>bower</code>搭建<code>bootstrap</code>工程<br><a id="more"></a></p>
<p><strong>搭建工程</strong></p>
<ol>
<li><p>建立项目文件夹如下的目录结构(都是空文件夹)</p>
<p> <img src="/image/1.png" alt=""></p>
</li>
<li><p>安装bower包管理器,推荐阅读下面的安装教程:</p>
<blockquote>
<p><a href="https://segmentfault.com/a/1190000000349555" target="_blank" rel="noopener">https://segmentfault.com/a/1190000000349555</a></p>
</blockquote>
</li>
<li><p>安装好bower之后,切换到项目文件夹下,新建一个.bowerrc文件,在其中加入代码</p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"directory"</span> : <span class="string">"assets/lib"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并保存;</p>
<ol>
<li>打开命令行切换到项目文件下</li>
</ol>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install bootstrap</span><br></pre></td></tr></table></figure>
<p>到项目下就发现在bower_components目录下安装好了bootstrap和jquery,因为bower会自动管理依赖,所以自动安装了jquery;</p>
<ol>
<li>依旧在项目文件夹下,在命令行运行:</li>
</ol>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower init</span><br></pre></td></tr></table></figure>
<p>这里有个参考</p>
<p><img src="/image/2.png" alt=""></p>
<p>然后按照提示选择选项,就可以了,完成这步,就完成项目的创建了,使用WebStorm打开就可以进行开发.</p>
<p><strong>clone工程的运行</strong></p>
<ol>
<li>(clone别人的工程的时候使用)当clone一份有bower.json的项目时,切换到项目文件夹下,在命令行运行:</li>
</ol>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install</span><br></pre></td></tr></table></figure>
<p>这时候,所有的依赖库都会安装完毕.</p>
<ol>
<li>使用WebStorm打开工程就可以进行开发了.</li>
</ol>
<p><strong>关于.gitignore要写什么</strong><br><strong>这里注意要将依赖库的文件夹和工程配置都加到忽略名单中,本工程的.gitignore参考内容如下:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.idea</span><br><span class="line">node_modules</span><br><span class="line">assets/lib</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 搭建工程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2016/03/27/quickstart/hello-world/</url>
      <content type="html"><![CDATA[<p>Hello World<br><a id="more"></a><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 入门 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
