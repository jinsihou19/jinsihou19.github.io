<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>金丝猴的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jinsihou19.github.io/"/>
  <updated>2017-12-12T15:09:22.842Z</updated>
  <id>http://jinsihou19.github.io/</id>
  
  <author>
    <name>金丝猴</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>meta标签控制IE渲染模式</title>
    <link href="http://jinsihou19.github.io/2017/12/12/webfront/meta%E6%A0%87%E7%AD%BE%E6%8E%A7%E5%88%B6IE%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jinsihou19.github.io/2017/12/12/webfront/meta标签控制IE渲染模式/</id>
    <published>2017-12-12T14:52:22.000Z</published>
    <updated>2017-12-12T15:09:22.842Z</updated>
    
    <content type="html"><![CDATA[<p>meta标签控制IE渲染标准模式和兼容模式<br><a id="more"></a></p><p>“X-UA-Compatible”的值有三种方式：</p><ol><li>Edge;</li><li>Emulate+IE版本号;</li><li>单纯版本号。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span> &gt;</span></span><br></pre></td></tr></table></figure><p>Edge：始终以最新的文档模式来渲染页面。忽略文档类型声明。对于IE8，始终以IE8标准模式渲染页面。IE9亦如此。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"IE=EmulateIE9"</span> &gt;</span></span><br></pre></td></tr></table></figure><ul><li>EmulateIE9：如果声明了文档类型，则以IE9标准模式渲染页面，否则将文档模式设置为IE5。</li><li>EmulateIE8：如果声明了文档类型，则以IE8标准模式渲染页面，否则将文档模式设置为IE5。 </li><li>EmulateIE7：如果声明了文档类型，则以IE7标准模式渲染页面，否则将文档模式设置为IE5。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"IE=9"</span> &gt;</span></span><br></pre></td></tr></table></figure><ul><li>9：强制以IE9标准模式渲染页面，忽略文档类型声明。</li><li>8：强制以IE8标准模式渲染页面，忽略文档类型声明。</li><li>7：强制以IE7标准模式渲染页面，忽略文档类型声明。</li><li>5：强制以IE5标准模式渲染页面，忽略文档类型声明。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;meta标签控制IE渲染标准模式和兼容模式&lt;br&gt;
    
    </summary>
    
      <category term="web 前端" scheme="http://jinsihou19.github.io/categories/web-%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://jinsihou19.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="web" scheme="http://jinsihou19.github.io/tags/web/"/>
    
      <category term="IE" scheme="http://jinsihou19.github.io/tags/IE/"/>
    
      <category term="兼容" scheme="http://jinsihou19.github.io/tags/%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>打包electron应用</title>
    <link href="http://jinsihou19.github.io/2016/05/20/quickstart/electron/%E6%89%93%E5%8C%85electron%E5%BA%94%E7%94%A8/"/>
    <id>http://jinsihou19.github.io/2016/05/20/quickstart/electron/打包electron应用/</id>
    <published>2016-05-20T10:05:45.000Z</published>
    <updated>2017-12-12T15:15:26.774Z</updated>
    
    <content type="html"><![CDATA[<p>运行第一个程序之后，我希望自己写的程序能够给别人运行，这就涉及到应用的打包。<br><a id="more"></a><br>在项目的目录下，打开终端运行命令安装electron打包工具。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron-packager --save-dev</span><br></pre></td></tr></table></figure></p><h2 id="打包应用"><a href="#打包应用" class="headerlink" title="打包应用"></a>打包应用</h2><p>安装完毕之后，在<code>packsge.json</code>中添加构建脚本。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "electron .",</span><br><span class="line">    "build": "electron-packager . MyApp --platform=darwin --arch=x64 --ignore=node_modules/electron-*"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>electron-packager的格式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">electron-packager 项目目录 app名称 --platform=平台 --arch=架构 --ignore=要忽略的目录或文件</span><br><span class="line"><span class="comment"># 详细的参数和使用方法可以是使用命令 --help的形式查看帮助</span></span><br></pre></td></tr></table></figure></p><p>保存之后，在终端运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></p><p><em>注意</em>：这个运行会下载没有的平台的构建包，网速慢的话需要不少时间。</p><p>完成之后就会在目录下生成一个appname-platform-arch名字的文件夹，打包好的应用就在文件夹中。</p><p><img src="1.png" alt=""></p><h2 id="压缩源码"><a href="#压缩源码" class="headerlink" title="压缩源码"></a>压缩源码</h2><p>生成应用的时，有时候不希望直接暴漏源码。使用源码压缩就可以将源码打包成一个asar的包。<br>同样需要添加脚本，现在的脚本是这样的：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "electron .",</span><br><span class="line">    "package": "asar pack MyApp-darwin-x64/MyApp.app/Contents/Resources/app MyApp-darwin-x64/MyApp.app/Contents/Resources/app.asar",</span><br><span class="line">    "build": "electron-packager . MyApp --platform=darwin --arch=x64 --ignore=node_modules/electron-*"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>在终端运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install package</span><br></pre></td></tr></table></figure></p><p>现在打开app包就可以看见同名的asar的，然后删除原来的源码包就可以了。</p><p><img src="2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;运行第一个程序之后，我希望自己写的程序能够给别人运行，这就涉及到应用的打包。&lt;br&gt;
    
    </summary>
    
      <category term="入门" scheme="http://jinsihou19.github.io/categories/%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Nodejs" scheme="http://jinsihou19.github.io/tags/Nodejs/"/>
    
      <category term="Electron" scheme="http://jinsihou19.github.io/tags/Electron/"/>
    
      <category term="原生应用" scheme="http://jinsihou19.github.io/tags/%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>新建Electron应用</title>
    <link href="http://jinsihou19.github.io/2016/05/20/quickstart/electron/Try-Electron/"/>
    <id>http://jinsihou19.github.io/2016/05/20/quickstart/electron/Try-Electron/</id>
    <published>2016-05-19T17:24:51.000Z</published>
    <updated>2017-12-12T15:15:26.774Z</updated>
    
    <content type="html"><![CDATA[<p>Electron 框架的前身是 Atom Shell，可以让你写使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序。它是基于io.js 和 Chromium 开源项目，并用于在 Atom 编辑器中。Electron 是开源的，由 GitHub 维护，有一个活跃的社区。最重要的是，Electron 应用服务构建和运行在 Mac，Windows 和 Linux。<br><a id="more"></a></p><h2 id="建立npm工程"><a href="#建立npm工程" class="headerlink" title="建立npm工程"></a>建立npm工程</h2><p>新建工程文件夹，使用npm初始化一个npm项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>接下来npm会引导你进行一个配置向导，配置完成之后会生成一个<code>package.json</code>的配置文件。配置文件大概是这样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"electron-app"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"electron-app"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"jinsihou"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装Electron"><a href="#安装Electron" class="headerlink" title="安装Electron"></a>安装Electron</h2><p>运行以下命令安装electron。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i electron-prebuilt --save-dev    <span class="comment">#保存在依赖中以便下次使用</span></span><br></pre></td></tr></table></figure></p><p>安装完成之后，在工程目录下建立一个<code>index.js</code>，这个名字需要和<code>package.json</code>配置的main项保持一致。填入以下内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>保存之后，现在我们来运行一下，编辑<code>package.json</code>,在scripts下添加一项。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "electron ."</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行命令，启动应用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>这就是一个最简单的electron应用，它只有一个800*600的空窗口。</p><h2 id="Hello-electron"><a href="#Hello-electron" class="headerlink" title="Hello electron"></a>Hello electron</h2><p>编辑<code>index.js</code>，添加一个html作为内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">app.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">  width: <span class="number">800</span>,</span><br><span class="line">  height: <span class="number">600</span></span><br><span class="line">  &#125;);</span><br><span class="line">  mainWindow.loadURL(<span class="string">'file://'</span> + __dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>新建一个<code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  Hello electron</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行如图：<br><img src="1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Electron 框架的前身是 Atom Shell，可以让你写使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序。它是基于io.js 和 Chromium 开源项目，并用于在 Atom 编辑器中。Electron 是开源的，由 GitHub 维护，有一个活跃的社区。最重要的是，Electron 应用服务构建和运行在 Mac，Windows 和 Linux。&lt;br&gt;
    
    </summary>
    
      <category term="入门" scheme="http://jinsihou19.github.io/categories/%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Nodejs" scheme="http://jinsihou19.github.io/tags/Nodejs/"/>
    
      <category term="Electron" scheme="http://jinsihou19.github.io/tags/Electron/"/>
    
      <category term="原生应用" scheme="http://jinsihou19.github.io/tags/%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>构建Hexo静态网站</title>
    <link href="http://jinsihou19.github.io/2016/05/19/quickstart/%E9%83%A8%E7%BD%B2%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8hexo/"/>
    <id>http://jinsihou19.github.io/2016/05/19/quickstart/部署和简单使用hexo/</id>
    <published>2016-05-19T15:28:54.000Z</published>
    <updated>2017-12-12T15:18:45.535Z</updated>
    
    <content type="html"><![CDATA[<p>这个Hexo部署有一段时间了，但是时间久了之后，我连怎么写文章部署到github.io都忘记了，所以写下本文，作为整理和记录，以供以后复习。<br><a id="more"></a></p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>下载并安装git或者是github，了解点Git的基础命令就可以完成本任务。</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>到官网下载并安装Node.js，最好选择稳定版。</p><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>npm是nodejs的模块管理器，npm在nodejs中自带，介绍几个常用命令，#之后为注释。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm --<span class="built_in">help</span>          <span class="comment">#npm帮助，查看其他命令的使用方法</span></span><br><span class="line">npm i module_name   <span class="comment">#安装node模块完整的命令是npm install</span></span><br><span class="line">npm i               <span class="comment">#单独使用的时候，可以根据文件夹下的package.json配置文件自动安装依赖</span></span><br><span class="line">npm init            <span class="comment">#初始化一个init工程，会启动一个向导一样的配置，成功之后会生成一个package.json</span></span><br></pre></td></tr></table></figure></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>安装全局Hexo：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure></p><p>新建一个工程文件夹，在该文件夹下运行命令，Hexo会自动在该文件夹下下载搭建网站所需的所有文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></p><p>安装依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>现在就已经安装好了基本内容了，现在介绍几个Hexo常用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment">#完整命令为hexo generate,用于生成静态文件</span></span><br><span class="line">hexo s <span class="comment">#完整命令为hexo server,用于启动服务器，主要用来本地预览</span></span><br><span class="line">hexo d <span class="comment">#完整命令为hexo deploy,用于将本地文件发布到github上</span></span><br><span class="line">hexo n <span class="comment">#完整命令为hexo new,用于新建一篇文章，包括自动建立资源文件夹</span></span><br></pre></td></tr></table></figure></p><p>本地运行一下安装好的hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p>然后用浏览器访问<code>http://localhost:4000/</code>此时，你应该看到了一个漂亮的博客了，当然这个博客只是在本地的，别人是看不到的,我们需要把他发布到github.io上。</p><h2 id="部署本地文件到github"><a href="#部署本地文件到github" class="headerlink" title="部署本地文件到github"></a>部署本地文件到github</h2><p>编辑hexo工程下的_config.yml文件,在_config.yml最下方，添加如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/jinsihou19/jinsihou19.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: new</span><br></pre></td></tr></table></figure><p>保存之后运行以下命令部署到github上，第一次运行会要求输入密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="hexo的配置文件"><a href="#hexo的配置文件" class="headerlink" title="hexo的配置文件"></a>hexo的配置文件</h2><p>hexo里面有两个常用到的配置文件，分别是整个博客的配置文件<code>hexo\_config.yml</code>和主题的配置文件<code>hexo\themes\hueman\_config.yml</code>。接下来介绍整个博客的配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site这下面的几项配置都很简单，你看我的博客就知道分别是什么意思</span></span><br><span class="line">title: 金丝猴的博客 <span class="comment">#博客名</span></span><br><span class="line">subtitle:</span><br><span class="line">description:</span><br><span class="line">author: 金丝猴</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone:     <span class="comment">#时区，此处不填写，hexo会以你目前电脑的时区为默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL暂不配置，使用默认值</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://jinsihou19.github.io  <span class="comment">#域名</span></span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory暂不配置，使用默认值</span></span><br><span class="line">source_dir: <span class="built_in">source</span></span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing文章布局等，使用默认值</span></span><br><span class="line">new_post_name: :title.md <span class="comment"># File name of new posts</span></span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line">external_link: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line">post_asset_folder: <span class="literal">false</span></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line">future: <span class="literal">true</span></span><br><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag暂不配置，使用默认值</span></span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format时间格式，使用默认值</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 10<span class="comment">#每页显示的文章数，0表示不分页</span></span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions插件配置，暂时不配置</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: http://hexo.io/themes/</span></span><br><span class="line">plugins:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">theme: hueman<span class="comment">#使用的主题，即：myblog\themes文件夹下的主题文件夹名</span></span><br><span class="line"></span><br><span class="line">feed:<span class="comment">#之后配置rss会用，使用如下配置即可</span></span><br><span class="line">  <span class="built_in">type</span>: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  <span class="built_in">limit</span>: 20  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment用于部署到github，之前已经配置过</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/jinsihou19/jinsihou19.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="发表一篇文章"><a href="#发表一篇文章" class="headerlink" title="发表一篇文章"></a>发表一篇文章</h2><p>想要新建文章的时候，在项目文件夹下运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"my new post"</span></span><br></pre></td></tr></table></figure><p>使用Markdown进行编辑，这是用命令创建出来的md文件模板。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: my new post <span class="comment">#可以改成中文的，如“新文章”</span></span><br><span class="line">date: 2015-04-08 22:56:29 <span class="comment">#发表日期，一般不改动</span></span><br><span class="line">categories: blog <span class="comment">#文章文类</span></span><br><span class="line">tags: [博客，文章] <span class="comment">#文章标签，多于一项时用这种格式，只有一项时使用tags: blog</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上</span></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"><span class="comment">#在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</span></span><br></pre></td></tr></table></figure><p>写完文章后，部署的步骤：</p><ol><li><code>hexo g</code>生成静态文件。</li><li><code>hexo s</code>在本地预览效果。</li><li><code>hexo d</code>同步到github，然后使用<code>http://jinsihou19.github.io</code>进行访问。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个Hexo部署有一段时间了，但是时间久了之后，我连怎么写文章部署到github.io都忘记了，所以写下本文，作为整理和记录，以供以后复习。&lt;br&gt;
    
    </summary>
    
      <category term="入门" scheme="http://jinsihou19.github.io/categories/%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Hexo" scheme="http://jinsihou19.github.io/tags/Hexo/"/>
    
      <category term="npm" scheme="http://jinsihou19.github.io/tags/npm/"/>
    
      <category term="Nodejs" scheme="http://jinsihou19.github.io/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>事件代理和json对象的操作</title>
    <link href="http://jinsihou19.github.io/2016/03/28/webfront/%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E5%92%8Cjson%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://jinsihou19.github.io/2016/03/28/webfront/事件代理和json对象的操作/</id>
    <published>2016-03-27T16:33:38.000Z</published>
    <updated>2017-12-12T15:09:24.816Z</updated>
    
    <content type="html"><![CDATA[<p>任务十六 事件代理和json对象的操作<br><a id="more"></a></p><h3 id="json对象的操作"><a href="#json对象的操作" class="headerlink" title="json对象的操作"></a>json对象的操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aqiData = &#123;</span><br><span class="line"><span class="string">"北京"</span>: <span class="number">90</span>,</span><br><span class="line"><span class="string">"上海"</span>: <span class="number">40</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>添加</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aqiData[city] = value;</span><br></pre></td></tr></table></figure><ol><li>遍历</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> data <span class="keyword">in</span> aqiData) &#123;</span><br><span class="line"><span class="built_in">console</span>.info(consldata:aqiData[data]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>删除</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> aqiData[data];</span><br></pre></td></tr></table></figure><h3 id="事件代理机制"><a href="#事件代理机制" class="headerlink" title="事件代理机制"></a>事件代理机制</h3><p><em>事件代理机制</em></p><blockquote><p>当我们需要对很多元素添加事件的时候，可以通过将事件添加到它们的父节点而将事件委托给父节点来触发处理函数。这主要得益于浏览器的事件冒泡机制。</p></blockquote><p><em>浏览器的事件冒泡机制</em></p><blockquote><p>DOM2.0模型将事件处理流程分为三个阶段：一、事件捕获阶段，二、事件目标阶段，三、事件起泡阶段。如图：</p><p>事件捕获：当某个元素触发某个事件（如onclick），顶层对象document就会发出一个事件流，随着DOM树的节点向目标元素节点流去，直到到达事件真正发生的目标元素。在这个过程中，事件相应的监听函数是不会被触发的。</p><p>事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数。如果没有绑定监听函数，那就不执行。</p><p>事件起泡：从目标元素开始，往顶层元素传播。途中如果有节点绑定了相应的事件处理函数，这些函数都会被一次触发。如果想阻止事件起泡，可以使用e.stopPropagation()（Firefox）或者e.cancelBubble=true（IE）来组织事件的冒泡传播。</p></blockquote><p><img src="http://images.cnitblog.com/blog/477973/201302/18141423-8bd09a9c1e184df9a13b6e26b88348f3.jpg" alt=""></p><p><em>实例</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"aqi-table"</span> <span class="attr">border</span>=<span class="string">"1px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>空气质量<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当事件被抛到更上层的父节点的时候，我们通过检查事件的目标对象（target）来判断并获取事件源对象。我这里没有判断是否是这个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由上层（泛指）来捕获这个事件，然后回溯到事件触发者来进行处理</span></span><br><span class="line">table.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.target) &#123;<span class="comment">//这里的taget就是button</span></span><br><span class="line">    <span class="keyword">let</span> context = e.target.parentNode.parentNode.firstChild.innerText;</span><br><span class="line">    <span class="keyword">delete</span> aqiData[context];</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;任务十六 事件代理和json对象的操作&lt;br&gt;
    
    </summary>
    
      <category term="web 前端" scheme="http://jinsihou19.github.io/categories/web-%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="事件代理" scheme="http://jinsihou19.github.io/tags/%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86/"/>
    
      <category term="javascript" scheme="http://jinsihou19.github.io/tags/javascript/"/>
    
      <category term="dom" scheme="http://jinsihou19.github.io/tags/dom/"/>
    
  </entry>
  
  <entry>
    <title>搭建工程</title>
    <link href="http://jinsihou19.github.io/2016/03/28/webfront/%E6%90%AD%E5%BB%BA%E7%A4%BA%E8%8C%83%E5%B7%A5%E7%A8%8B/"/>
    <id>http://jinsihou19.github.io/2016/03/28/webfront/搭建示范工程/</id>
    <published>2016-03-27T16:33:00.000Z</published>
    <updated>2017-12-12T15:09:31.516Z</updated>
    
    <content type="html"><![CDATA[<p>用于示范搭建工程<br><a id="more"></a></p><p><strong>搭建工程</strong></p><ol><li><p>建立项目文件夹如下的目录结构(都是空文件夹)</p><p> <img src="/image/1.png" alt=""></p></li><li><p>安装bower包管理器,推荐阅读下面的安装教程:</p><blockquote><p><a href="https://segmentfault.com/a/1190000000349555" target="_blank" rel="noopener">https://segmentfault.com/a/1190000000349555</a></p></blockquote></li><li><p>安装好bower之后,切换到项目文件夹下,新建一个.bowerrc文件,在其中加入代码</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"directory"</span> : <span class="string">"assets/lib"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并保存;</p><ol><li>打开命令行切换到项目文件下</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install bootstrap</span><br></pre></td></tr></table></figure><p>到项目下就发现在bower_components目录下安装好了bootstrap和jquery,因为bower会自动管理依赖,所以自动安装了jquery;</p><ol><li>依旧在项目文件夹下,在命令行运行:</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower init</span><br></pre></td></tr></table></figure><p>这里有个参考</p><p><img src="/image/2.png" alt=""></p><p>然后按照提示选择选项,就可以了,完成这步,就完成项目的创建了,使用WebStorm打开就可以进行开发.</p><p><strong>clone工程的运行</strong></p><ol><li>(clone别人的工程的时候使用)当clone一份有bower.json的项目时,切换到项目文件夹下,在命令行运行:</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install</span><br></pre></td></tr></table></figure><p>这时候,所有的依赖库都会安装完毕.</p><ol><li>使用WebStorm打开工程就可以进行开发了.</li></ol><p><strong>关于.gitignore要写什么</strong><br><strong>这里注意要将依赖库的文件夹和工程配置都加到忽略名单中,本工程的.gitignore参考内容如下:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.idea</span><br><span class="line">node_modules</span><br><span class="line">assets/lib</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用于示范搭建工程&lt;br&gt;
    
    </summary>
    
      <category term="web 前端" scheme="http://jinsihou19.github.io/categories/web-%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="搭建工程" scheme="http://jinsihou19.github.io/tags/%E6%90%AD%E5%BB%BA%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jinsihou19.github.io/2016/03/27/quickstart/hello-world/"/>
    <id>http://jinsihou19.github.io/2016/03/27/quickstart/hello-world/</id>
    <published>2016-03-27T08:11:02.000Z</published>
    <updated>2017-12-12T15:18:45.501Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="入门" scheme="http://jinsihou19.github.io/categories/%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
</feed>
